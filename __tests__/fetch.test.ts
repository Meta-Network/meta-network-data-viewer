import { render, screen } from '@testing-library/react';
import { getMetadata } from '../services/metadata';
import { getArweaveBlockByHash, getArweaveTxnStatusByHash } from '../services/arweave';
import { getCidTimeInfo, getTxnHashByCidAndBlockNumberFromRPC } from '../services/IPFSCidTimeInfoMapping';

jest.setTimeout(30000);

describe('service test', () => {

  it('fetch metadata from Arweave', async () => {
    const content = await getMetadata("https://arweave.net/:hash", "ujEJk9ixgw1OmTSXqwlU8BEh-c7swBGDad6Q-QpaF5E", 15000);
    expect(content).toEqual({ "@context": "https://metanetwork.online/ns/grid", "@type": "meta-network-grids-server-sign", "@version": "1.0.0", "signatureAlgorithm": "curve25519", "publicKey": "0xbada4a41bc2f9a5629f22cf8660eb3bfb766713e10d4ba81a0082c327a38d857", "items": [{ "userId": 473, "subdomain": "team.metaspaces.me", "metaSpaceSiteId": 52, "metaSpaceSiteUrl": "https://team.metaspaces.me", "id": 461, "previousTx": "DqJEsYZxn0ZrW6U-2pI2EWs4PgdJw0zfxRI9GHGPAKA" }], "nonce": "0x6fbf493c195bc6e7261c472a", "claim": "I, metanetwork.online maintain grids for users, using the key: 0xbada4a41bc2f9a5629f22cf8660eb3bfb766713e10d4ba81a0082c327a38d857", "digest": "0xb28c94b2195c8ed259f0b415aaee3f39b0b2920a4537611499fa044956917a21", "signature": "0x8e0b8eb201c8617166bec26ba8b2086f9b253208ec156ad98be0506c1199412a97c4a2cf67292790b7dfa9c0e5b992aed6631d63b992498205965a61416d6486", "ts": 1640174400293, "previousBatchTx": "3mSGg3chcVI5m42ruHHYdUhfAFN1RZxMMVyOOsbtsSg" });
  })

  it('get Arweave block info ', async () => {
    const hash = "ujEJk9ixgw1OmTSXqwlU8BEh-c7swBGDad6Q-QpaF5E";
    const { block_height, block_indep_hash } = await getArweaveTxnStatusByHash(hash);
    const { timestamp } = await getArweaveBlockByHash(block_indep_hash);

    expect(block_height).toEqual(836672);
    expect(block_indep_hash).toEqual('c_bSgi6wLreceSisdz_frXAB0vUoXwMoySU84Y1JhzOi4_mumXyM7P5plZwijVnD');
    expect(timestamp).toEqual(1640174595);
  })

  // it('fetch metadata from IPFS', async () => {
  //   const content = await getMetadata("https://ipfs.io/ipfs/:hash", "bafybeifwrz6iywguztyete72gawtu42hm4t7mk5bhsv4o5ey6xv3bevrdi", 15000);
  //   expect(content).toEqual({ "@context": "https://metanetwork.online/ns/cms", "type": "server-verification-sign", "signatureAlgorithm": "curve25519", "version": "2021-11-01-01", "publicKey": "0x7660c1fc42a2d9aa3f0a4551db9e63f169ecfd56571add56622a6e4824162f1f", "nonce": "0x9ffe799c26f6acee99213e57", "claim": "I, meta-cms.vercel.mttk.net authorize request (sign: 0xdf2d98263272994443d1f0c51110d34de8d2dad8d5a9989956e88c6625d8be956b3117d82ade76f3b4492036e05a559c54cc319a0f2f85442a003864683fa105) using key: 0x7660c1fc42a2d9aa3f0a4551db9e63f169ecfd56571add56622a6e4824162f1f", "signature": "0x95bee8a4a37d7f432ef4ccd5cef57125ca610c7b482883abd7676742974be23921b816933f98858b4db51d4e888abbb0b64078eccb85b6dc2ce1f22dda302709", "ts": 1637235456856, "reference": [{ "refer": "bafybeihschm6d7pzmbiwf3f6sbhj52jtv6m2vbkzv2qmmxfveyw2wi2buu", "body": { "@context": "https://metanetwork.online/ns/cms", "type": "author-digest", "algorithm": "sha256", "version": "2021-11-01-01", "title": "测试带封面的草稿", "cover": "https://storageapi.fleek.co/andoromedaio-team-bucket/metanetwork/users/metaio-storage/meta-space-preview-freemind-.-386.png", "summary": "测试 UML 图\n@startuml\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/...", "content": "测试UML图\n\n```plantuml\n@startuml\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml\n\n\n\nPerson(creator, \"Creator\")\n\nSystem_Boundary(meta, \"Meta\"){\n\n    System_Boundary(meta_cms, \"Meta CMS\"){\n        Container(cms_frontend, \"CMS Frontend\", \"Umi.js\")\n        Container(cms_api_app, \"CMS API Application\", \"Nest.js\", \"Handles all business logic\")\n        ContainerDb(cms_db, \"CMS Database\", \"MySQL\", \"Holds social media platform aggregation,service pipeline information\", $sprite=\"mysql_server\")\n\n    }\n\n    Container(ucenter_api_app, \"UCenter API Application\", \"Nest.js\", \"Handles all user/account/auth logic\")\n    ContainerDb(ucenter_db, \"UCenter Database\", \"MySQL\", \"Holds user,account,auth information\", $sprite=\"mysql_server\")\n\n    Container(fan_ticket_api_app, \"Fan Ticket API Application\", \"Nest.js\", \"Handles all fan ticket logic\")\n    ContainerDb(fan_ticket_db, \"Fan Ticket Database\", \"MySQL\", \"Holds fan ticket information\", $sprite=\"mysql_server\")\n\n\n    ContainerQueue(message_broker, \"Message Broker\",\"NATS\")\n\n    System_Boundary(meta_network, \"Meta Network\"){\n        Container(meta_network_frontend, \"Meta Network Frontend\", \"React.js\")\n        Container(meta_network_api_app, \"Meta Network API Application\", \"Nest.js\", \"Handles all Social Network logic\")\n        ContainerDb(meta_network_db, \"Meta Network Database\", \"MySQL\", \"Holds social network information\", $sprite=\"mysql_server\")\n    }\n\n    System(nft_market, \"NFT Market\")\n\n\n\n\n}\n\nSystem(meta_space, \"Meta Space\")\n\nSystem_Ext(git_repo_provider, \"Git Repo Provider\",\"如 Github\")\nSystem_Ext(publisher, \"Publisher\",\"如 Github Pages,Vercel,Netlify\")\n\nRel(creator, cms_frontend, \"Uses\",\"https\")\nRel(creator, meta_network_frontend, \"Uses\",\"https\")\n\nRel(cms_frontend, ucenter_api_app, \"Uses\",\"https\")\nRel(cms_frontend, cms_api_app, \"Uses\",\"https\")\nRel(cms_frontend, fan_ticket_api_app, \"Uses\",\"https\")\n\nRel(ucenter_api_app, ucenter_db, \"Reads/Writes\")\nRel(cms_api_app, cms_db, \"Reads/Writes\")\nRel(fan_ticket_api_app, fan_ticket_db, \"Reads/Writes\")\n\nRel(meta_network_frontend, ucenter_api_app, \"Uses\",\"https\")\nRel(meta_network_frontend, meta_network_api_app, \"Uses\",\"https\")\nRel(meta_network_frontend, cms_api_app, \"Uses\",\"https\")\nRel(meta_network_api_app, meta_network_db, \"Reads/Writes\")\n\n\n'Rel(ucenter_api_app, message_broker, \"Pub/Sub\")\n'Rel(cms_api_app, message_broker, \"Pub/Sub\")\n'Rel(fan_ticket_api_app, message_broker, \"Pub/Sub\")\n'Rel(meta_network_api_app, message_broker, \"Pub/Sub\")\n\n\nRel(cms_api_app, git_repo_provider, \"Uses\")\nRel(cms_api_app, publisher, \"Uses\")\n\nRel(publisher, git_repo_provider, \"Reads\")\n\nRel(publisher, meta_space, \"Builds & Hosts\")\nRel(meta_space, nft_market, \"Refer / Link\")\nRel_L(nft_market, ucenter_api_app, \"Uses\", \"https\")\n\n\n\nSHOW_FLOATING_LEGEND()\n@enduml\n```\n\n```plantuml\n@startuml\n!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml\n\nAddElementTag(\"v1.0\", $borderColor=\"#d73027\")\nAddElementTag(\"v1.1\", $fontColor=\"#d73027\")\nAddElementTag(\"backup\", $fontColor=\"orange\")\n\nAddRelTag(\"backup\", $textColor=\"orange\", $lineColor=\"orange\", $lineStyle = DashedLine())\n\nPerson(user, \"Customer\", \"People that need products\")\nPerson(admin, \"Administrator\", \"People that administrates the products via the new v1.1 components\", $tags=\"v1.1\")\nContainer(spa, \"SPA\", \"angular\", \"The main interface that the customer interacts with via v1.0\", $tags=\"v1.0\")\nContainer(spaAdmin, \"Admin SPA\", \"angular\", \"The administrator interface that the customer interacts with via new v1.1\", $tags=\"v1.1\")\nContainer(api, \"API\", \"java\", \"Handles all business logic (incl. new v1.1 extensions)\", $tags=\"v1.0+v1.1\")\nContainerDb(db, \"Database\", \"Microsoft SQL\", \"Holds product, order and invoice information\")\nContainer(archive, \"Archive\", \"Audit logging\", \"Stores 5 years\", $tags=\"backup\")\n\nRel(user, spa, \"Uses\", \"https\")\nRel(spa, api, \"Uses\", \"https\")\nRel_R(api, db, \"Reads/Writes\")\nRel(admin, spaAdmin, \"Uses\", \"https\")\nRel(spaAdmin, api, \"Uses\", \"https\")\nRel_L(api, archive, \"Writes\", \"messages\", $tags=\"backup\")\n\nSHOW_LEGEND()\n@enduml\n```\n\n`\n", "license": "", "categories": "", "tags": "", "digest": "0x1aab9ca40e1bd5ee515216283d8df3c76d4767c57edd93c2ffbf5061571c621d", "ts": 1637235493799 } }, { "refer": "bafybeigyo7p6745jh3ljrjkkb6bysuoggaek2tmcjos4frwcsvrxmtujcy", "body": { "@context": "https://metanetwork.online/ns/cms", "type": "author-digest-sign", "signatureAlgorithm": "curve25519", "version": "2021-11-01-01", "publicKey": "0xcbf139ba234cddf0bbd5c739d3c072bd12779b0e4b6b491a8fd8c9885eb2971f", "digest": "0x1aab9ca40e1bd5ee515216283d8df3c76d4767c57edd93c2ffbf5061571c621d", "nonce": "0x609f40db1d448fff3bf2f368", "claim": "I authorize publishing by metaspaces.life from this device using key: 0xcbf139ba234cddf0bbd5c739d3c072bd12779b0e4b6b491a8fd8c9885eb2971f", "signature": "0xdf2d98263272994443d1f0c51110d34de8d2dad8d5a9989956e88c6625d8be956b3117d82ade76f3b4492036e05a559c54cc319a0f2f85442a003864683fa105", "ts": 1637235493810 } }] })
  // })

  it('get IPFS cid timestamp and hash', async () => {
    const cid = "bafybeifwrz6iywguztyete72gawtu42hm4t7mk5bhsv4o5ey6xv3bevrdi"
    const { timestamp, blockNumber } = await getCidTimeInfo(cid);
    const hash = await getTxnHashByCidAndBlockNumberFromRPC(cid, Number(blockNumber));
    expect(timestamp).toEqual("1640074312");
    expect(blockNumber).toEqual("9851968");
    expect(hash).toEqual("0x96a870db25cfcf63a214c81057941a419237db3523681c3d0beb6259ab4055a6")
  })


})